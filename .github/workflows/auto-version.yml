name: Auto Version Management

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_type: ${{ steps.check.outputs.version_type }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history
    
    - name: Check for significant changes
      id: check
      run: |
        # Get the last commit that wasn't a version bump
        LAST_RELEASE_COMMIT=$(git log --oneline --grep="chore: version bump" --invert-grep -n 1 --format="%H")
        echo "Last significant commit: $LAST_RELEASE_COMMIT"
        
        # Check if there are changes since last release
        if [ "$LAST_RELEASE_COMMIT" != "${{ github.sha }}" ]; then
          # Check commit message for version type hints
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -qE "(BREAKING|breaking|major)"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qE "(feat:|feature:|minor)"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qE "(fix:|patch:|hotfix)"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=patch" >> $GITHUB_OUTPUT
          else
            # Default to patch for main branch merges
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=patch" >> $GITHUB_OUTPUT
          fi
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  auto-version:
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.should_release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      run: |
        VERSION_TYPE="${{ needs.check-changes.outputs.version_type }}"
        echo "Bumping $VERSION_TYPE version"
        
        # Get current version
        CURRENT_VERSION=$(python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        print(data['project']['version'])
        ")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version using bump2version
        bump2version --current-version $CURRENT_VERSION $VERSION_TYPE pyproject.toml
        
        # Get new version
        NEW_VERSION=$(python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        print(data['project']['version'])
        ")
        echo "New version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "chore: version bump to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"